@using System.Globalization
@using Nwazet.Commerce.Services
@using System.Collections.Generic
@using Nwazet.Commerce.Models;
@using System.Linq;
@using Orchard.ContentManagement;

@model Nwazet.Commerce.ViewModels.OrderEditorViewModel
@{
    Script.Require("jQuery");
    Style.Include("order-admin.css", "order-admin.min.css");
    Script.Include("order-admin.js", "order-admin.min.js");

    var _contentManager = WorkContext.Resolve<IContentManager>();

    Currency currencyInUse = Currency.Currencies[Model.CurrencyCode];
    CultureInfo cultureInUse = CultureInfo.GetCultureInfo(WorkContext.CurrentCulture);
}

<div class="order-editor">

    <fieldset class="order-items">
        <legend>@T("Products:")</legend>

        <table id="order_products_table">
            <thead>
                <tr>
                    <th class="quantity"><abbr title="@T("Quantity")">@T("Qty")</abbr></th>
                    <th class="description">@T("Product")</th>
                    <th class="price">@T("Catalog Price")</th>
                    <th class="price">@T("Selling Price")</th>
                    @if (Model.OrderItems.Any(oi => oi.LinePriceAdjustment != 0)) {
                        <th class="price">@T("Adjustment")</th>
                    }
                    @foreach (var additionalInfo in Model.AdditionalProductInformation) {
                        <th @(string.IsNullOrEmpty(additionalInfo.HeaderClass) ? "" : "class=\"" + additionalInfo.HeaderClass + "\"")>@additionalInfo.Title</th>
                    }
                </tr>
            </thead>
            <tbody id="order_products_table_body">
                @foreach (var item in Model.OrderItems) {
                    string originalPrice = "";
                    if (item.Price != item.OriginalPrice && item.OriginalPrice != (decimal)0.0) {
                        originalPrice = String.Format("<strike>{0}</strike>", currencyInUse.PriceAsString(item.OriginalPrice, cultureInUse));
                    }

                    <tr id="@string.Format("order_products_table_row-product_{0}", item.ProductId)">
                        <td class="quantity">@item.Quantity &times;</td>
                        <td class="description">
                            @{ 
                                var itemTitle = item.Title;
                                var productAttributes = (IDictionary<int, ProductAttributeValueExtended>)item.Attributes;
                                if (productAttributes != null && productAttributes.Any()) {
                                    var additionalText = "";
                                    foreach (var key in productAttributes.Keys) {
                                        var attributeValue = productAttributes[key];
                                        if (attributeValue != null) {
                                            // contribute to displayText
                                            //attributeValue.Value // "Data della visita"
                                            //attributeValue.ExtendedValue // "06/03/2021"
                                            additionalText = string.Join(" ",
                                                additionalText.Trim(),
                                                attributeValue.Value.Trim(),
                                                attributeValue.ExtendedValue.Trim());
                                        }
                                    }
                                    if (!string.IsNullOrWhiteSpace(additionalText)) {
                                        itemTitle += " (" +
                                            additionalText.Trim()
                                            + ")";
                                    }
                                }
                            }
                            @* check is a product *@
                            @if (_contentManager.Get(item.ProductId)?.As<ProductPart>() != null) {
                                <a href="@Url.ItemDisplayUrl(Model.Products[item.ProductId])" target="_blank">@itemTitle</a>
                            }
                            else {
                                <span>@itemTitle</span>
                            }
                        </td>
                        <td class="price">@Html.Raw(originalPrice)</td>
                        <td class="price">@currencyInUse.PriceAsString(item.Price, cultureInUse)</td>
                        @if (item.LinePriceAdjustment != 0) {
                            <td class="price">@currencyInUse.PriceAsString(item.LinePriceAdjustment, cultureInUse)</td>
                        }
                        @foreach (var additionalInfo in Model.AdditionalProductInformation) {
                            <td @(string.IsNullOrEmpty(additionalInfo.InformationClass) ? "" : "class=\"" + additionalInfo.InformationClass + "\"")>
                                @if (additionalInfo.Information.ContainsKey(item.ProductId)) {
                                    @additionalInfo.Information[item.ProductId]
                                }
                            </td>
                        }
                    </tr>
                    if (item.Attributes != null && item.Attributes.Any(a => a.Value.ExtensionProviderInstance != null)) {
                        <tr>
                            <td colspan="2">
                                @foreach (var attr in item.Attributes) {
                                    if (attr.Value.ExtensionProviderInstance != null) {
                                        @Display(attr.Value.ExtensionProviderInstance.BuildAdminShape(attr.Value.ExtendedValue))
                                    }
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>

            <tfoot>
                <tr class="subtotal">
                    <td colspan="3" class="label">@T("Subtotal")</td>
                    <td class="price">@currencyInUse.PriceAsString(Model.Order.SubTotal, cultureInUse)</td>
                </tr>
                <tr class="taxes">
                    <td colspan="3" class="label">@T("Taxes {0}", string.IsNullOrWhiteSpace(Model.Order.Taxes.Name) ? T("Taxes").Text : Model.Order.Taxes.Name)</td>
                    <td class="price">@currencyInUse.PriceAsString(Model.Order.Taxes.Amount, cultureInUse)</td>
                </tr>
                <tr class="shipping">
                    <td colspan="3" class="label">@T("{0} {1}", Model.Order.ShippingOption.ShippingCompany, Model.Order.ShippingOption.Description)</td>
                    <td class="price">@currencyInUse.PriceAsString(Model.Order.ShippingOption.Price, cultureInUse)</td>
                </tr>
                <tr class="total">
                    <td colspan="3" class="label">@T("Total")</td>
                    <td class="price">@currencyInUse.PriceAsString(Model.Order.Total, cultureInUse)</td>
                </tr>
                <tr class="amountPaid">
                    <td colspan="3" class="label">@T("Amount Paid")</td>
                    <td class="price@(Model.Order.AmountPaid < Model.Order.Total ? " red" : "")">
                        @Html.TextBoxFor(m => m.Order.AmountPaid, "{0:F2}", new { @class = "text order-amount-field", style = "text-align: right;", pattern = "[0-9]+([\\.,][0-9]+)?" })
                    </td>
                </tr>
            </tfoot>
        </table>
        @foreach (var additionalShape in Model.AdditionalProductShapes) {
            @Display(additionalShape)
        }
    </fieldset>

</div>