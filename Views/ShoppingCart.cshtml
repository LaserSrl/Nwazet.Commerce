@using Nwazet.Commerce.Models
@using Orchard.ContentManagement
@using System.Collections.Generic
@using Nwazet.Commerce.ViewModels;
@using Nwazet.Commerce.Services;
@using Nwazet.Commerce.Extensions;
@{
    Script.Require("jQuery");
    Script.Include("shoppingcart.js", "shoppingcart.min.js");
    var items = (IList<dynamic>)Model.ShopItems;
    var subtotal = (double) Model.Subtotal;
    var readOnly = Model.ReadOnly != null && Model.ReadOnly == true;
}
<article class="shoppingcart">
    @if (items.Any(it => !string.IsNullOrEmpty(it.Messages))) {
        string allMessages = string.Join(Environment.NewLine, items.Where(it => !string.IsNullOrEmpty(it.Messages)));
        <div id="shopping-cart-notification" class="message-Information">
            @allMessages
        </div>
    } else {
        <div id="shopping-cart-notification" class="message-Information hide"></div>
    }
    @using (Html.BeginFormAntiForgeryPost(Url.Action("Update", "ShoppingCart", new { area = "Nwazet.Commerce" }))) {
        if (!items.Any()) {
            <p class="shopping-cart-container" data-got-cart="false"
               data-use-local-storage="@Url.Action("UseLocalStorage", "ShoppingCart", new {area="Nwazet.Commerce"})">
                @T("You don't have any items in your shopping cart.")
            </p>
            <script type="text/javascript">
                var Nwazet = window.Nwazet || {};
                Nwazet.WaitWhileWeRestoreYourCart = "@T("Please wait while we restore your shopping cart...")";
                Nwazet.FailedToLoadCart = "@T("Failed to load the cart")";
            </script>
        } else {
            <div class="shopping-cart-container"
                 data-use-local-storage="@Url.Action("UseLocalStorage", "ShoppingCart", new {area="Nwazet.Commerce"})">
                <table>
                    <thead>
                        <tr>
                            <td colspan="2">@T("Article")</td>
                            <td class="numeric">@T("Original Unit Price")</td>
                            <td class="numeric">@T("Unit Price")</td>
                            <td class="numeric">@T("Quantity")</td>
                            <td class="numeric">@T("Total Price")</td>
                            @if (!readOnly) {
                                <td class="action"></td>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @for (var i = 0; i < items.Count; i++) {
                            var item = items[i];
                            var propertyNamePrefix = string.Format("items[{0}]", i);
                            var product = (IProduct)item.Product;
                            var contentItem = (IContent)item.Product;
                            var title = item.Title;
                            var productAttributes = (IDictionary<int, ProductAttributeValueExtended>)item.ProductAttributes;
                            if (productAttributes != null && productAttributes.Any()) {
                                var additionalText = 
                                    AttributeNameUtilities.AttributesDisplayText(productAttributes: productAttributes, product: contentItem, separator: ", ");
                        
                                if (!string.IsNullOrWhiteSpace(additionalText)) {
                                    title += "(" + additionalText + ")";
                                }
                            }
                            string imageUrl = (item.ProductImage != null && item.ProductImage.MediaParts.Count > 0) ? item.ProductImage.MediaParts[0].MediaUrl : null;
                            var quantity = (int)item.Quantity;
                            var unitPrice = (double)item.DiscountedPrice;
                            var unitPriceOriginal = (double)item.OriginalPrice;
                            var linePriceAdjustment = (double)item.LinePriceAdjustment;
                            var totalPrice = quantity * unitPrice + linePriceAdjustment;
                            var minimumOrderQuantity = item.MinimumOrderQuantity;
                            var productInventory = (int)item.Inventory;
                            bool prodIsDigital = (bool)item.IsDigital;
                            bool prodConsiderInventory = (bool)item.ConsiderInventory;

                            string originalUnitPrice = "";
                            if (unitPrice != unitPriceOriginal && unitPriceOriginal != 0.0) {
                                originalUnitPrice = String.Format("<strike>{0}</strike>", Model.CurrencyProvider.GetPriceString(item.OriginalPrice));
                            }

                            <tr>
                                @if (imageUrl != null) {
                                    <td>
                                        <a href="@Url.ItemDisplayUrl(contentItem)" class="product-image-link" data-product-id="@contentItem.Id"><img src="@Href(imageUrl)" alt="@title" class="product-image" /></a>
                                    </td>
                                    <td>
                                        <a href="@Url.ItemDisplayUrl(contentItem)" class="product-name" data-product-id="@contentItem.Id">@title</a>
                                    </td>
                                } else {
                                    <td colspan="2"><a href="@Url.ItemDisplayUrl(contentItem)" data-product-id="@contentItem.Id">@title</a></td>
                                }
                                <td class="numeric">@Html.Raw(originalUnitPrice)</td>
                                <td class="numeric">@Model.CurrencyProvider.GetPriceString(unitPrice)</td>
                                <td class="numeric">
                                    @if (readOnly) {
                                        <span class="quantity">@quantity</span>
                                        if (minimumOrderQuantity > 1) {
                                            <br /><strong>Minimum order of @minimumOrderQuantity required.</strong>
                                        }
                                    } else {
                                        if (item.ProductAttributes != null) {
                                            var attrIndex = 0;
                                            foreach (KeyValuePair<int, ProductAttributeValueExtended> attribute in item.ProductAttributes) {
                                                var attributeNamePrefix = propertyNamePrefix + ".AttributeIdsToValues[" + attrIndex + "]";
                                                <input type="hidden" name="@(attributeNamePrefix).Key" value="@attribute.Key" />
                                                <input type="hidden" name="@(attributeNamePrefix).Value.Value" value="@attribute.Value.Value" />
                                                <input type="hidden" name="@(attributeNamePrefix).Value.ExtendedValue" value="@attribute.Value.ExtendedValue" />
                                                <input type="hidden" name="@(attributeNamePrefix).Value.ExtensionProvider" value="@attribute.Value.ExtensionProvider" />
                                                attrIndex++;
                                            }
                                        }
                                        <input name="@(propertyNamePrefix + ".ProductId")" type="hidden" value="@product.Id" />
                                        <input name="@(propertyNamePrefix + ".Quantity")" type="number" class="quantity addtocart-quantity" value="@quantity" min="0" data-cart-product-id="@product.Id" />
                                        if (quantity > productInventory && (!prodIsDigital || (prodIsDigital && prodConsiderInventory))) {
                                            string allowBackOrderMsg = (bool)item.AllowBackOrder ? T("Back order is allowed").Text : T("Back order is not allowed").Text;
                                            <span class="issue">
                                                @T("Only {0} in stock. {1}.", productInventory, allowBackOrderMsg)
                                            </span>
                                        }
                                    }
                                </td>
                                <td class="numeric amount">@Model.CurrencyProvider.GetPriceString(totalPrice)</td>
                                @if (!readOnly) {
                                    <td class="action"><a class="delete" href="#" data-product-cart-id="@product.Id">@T("Remove")</a></td>
                                }
                            </tr>
                        }

                    </tbody>

                    <tfoot>
                        <tr class="total">
                            <td class="numeric label" colspan="5">@T("Subtotal:")</td>
                            <td class="numeric amount">@Model.CurrencyProvider.GetPriceString(subtotal)</td>
                            @if (!readOnly) {
                                <td class="action"><button name="command" value="Update" type="submit" class="update-button">@T("Update All")</button></td>
                            }
                        </tr>
                        @if (Model.Taxes != null && Model.Taxes.Name != null) {
                            <tr class="total">
                                <td class="numeric label" colspan="5">@T("Taxes {0}", Model.Taxes.Name):</td>
                                <td class="numeric amount">@Model.CurrencyProvider.GetPriceString(Model.Taxes.Amount)</td>
                            </tr>
                        }
                        @if (Model.PriceAlterations != null) {
                            foreach (CartPriceAlterationAmount alteration in Model.PriceAlterations) {
                                <tr class="total">
                                    <td class="numeric label" colspan="5">
                                        @if (!string.IsNullOrWhiteSpace(alteration.RemovalAction)) {
                                            using (Html.BeginFormAntiForgeryPost(
                                                alteration.RemovalAction)) {

                                                @alteration.Label
                                                <input type="hidden"
                                                    name="coupon.Code"
                                                    value="@alteration.Key">
                                                <button class="btn"
                                                    type="submit"
                                                    formaction="@alteration.RemovalAction"
                                                    title="@T("Remove")"
                                                    ><i class="fa fa-times"></i></button>
                                            }
                                        } else {
                                            @alteration.Label
                                        }
                                    </td>
                                    <td class="numeric amount">@Model.CurrencyProvider.GetPriceString(alteration.Amount)</td>
                                </tr>
                            }
                        }
                        @if (!Model.ShopItemsAllDigital && Model.ShippingOption != null) {
                            var shippingOption = (ShippingOption)Model.ShippingOption;
                            <tr class="total">
                                <td class="numeric label" colspan="5">@T("{1} {0}", Html.Raw(shippingOption.Description), shippingOption.ShippingCompany):</td>
                                <td class="numeric amount">@Model.CurrencyProvider.GetPriceString(shippingOption.Price)</td>
                            </tr>
                            <tr class="total final">
                                <td class="numeric label" colspan="5">@T("Total:")</td>
                                <td class="numeric amount">@Model.CurrencyProvider.GetPriceString(Model.Total)</td>
                            </tr>
                        }
                    </tfoot>
                </table>
                @{ 
                    // Hidden inputs for each cart price alteration so they may be read from the form
                    var alterationIndex = 0;
                    foreach (var priceAlteration in Model.PriceAlterations) {
                        var propertyNamePrefix = string.Format("priceAlterations[{0}]", alterationIndex++);
                        <input name="@(propertyNamePrefix + ".AlterationType")" type="hidden" value="@priceAlteration.AlterationType" />
                        <input name="@(propertyNamePrefix + ".Key")" type="hidden" value="@priceAlteration.Key" />
                    }
                }

                @if (!Model.ShopItemsAllDigital) {
                    if (Model.ShippingOption != null) { //we selected shipping options
                        <p>
                            @T("Click <a href=\"{0}\">here</a> to choose a different shipping option.",
                               Url.Action("ResetShippingOption", "ShoppingCart", new { area = "Nwazet.Commerce" }))
                        </p>
                    } else if (Model.ShippingOptions != null && Model.ShippingOptions.Count > 0) {
                        @Display.ShippingOptions(ShippingOptions: Model.ShippingOptions, Country: Model.Country, ZipCode: Model.ZipCode, CurrencyProvider: Model.CurrencyProvider)
                    } else if (!String.IsNullOrWhiteSpace(Model.Country) && !String.IsNullOrWhiteSpace(Model.ZipCode)) {
                        <p>
                            @T("No shipping options available for {0} {1}. Click <a href=\"{2}\">here</a> to change your shipping destination.",
                       Model.Country,
                       Model.ZipCode,
                                Url.Action("ResetDestination", "ShoppingCart", new { area = "Nwazet.Commerce" }))
                        </p>
                    } else {
                        @Display.ShippingInfoForm()
                    }
                }


            </div>
        }
        foreach (var additionalShape in Model.CartExtensionShapes) {
            @Display(additionalShape)
        }
    }
    @if (items.Any() && Model.CheckoutButtons != null && (
                    Model.ShippingOption != null || Model.ShopItemsAllDigital)) { // && !String.IsNullOrWhiteSpace(Model.Country) && !String.IsNullOrWhiteSpace(Model.ZipCode)))) {
        <ul class="checkout">
            @foreach (var checkoutButton in Model.CheckoutButtons) {
                <li>
                    @Display(checkoutButton)
                </li>
            }
        </ul>
    }
    @if (Model.ShopItemsAuthenticationRequired && !HttpContext.Current.User.Identity.IsAuthenticated) {
        <p>
            @T("Some products in your cart require you to be authenticated. <a href=\"{0}\">Please log on to complete your order.</a>",
            Url.Action("LogOn", "Account", new { area = "Orchard.Users" }))
        </p>
    }
</article>